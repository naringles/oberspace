{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/naringles/Desktop/OneStorage/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isValidElement, useRef, useState, useCallback, useEffect, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all'\n};\nvar VALUE = 'value';\nvar SELECT = 'select';\nvar UNDEFINED = 'undefined';\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nfunction attachEventListeners(_ref, shouldAttachChangeEvent, handleChange) {\n  var ref = _ref.ref;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isArray = function isArray(value) {\n  return Array.isArray(value);\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n};\n\nvar isKey = function isKey(value) {\n  return !isArray(value) && (/^\\w*$/.test(value) || !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n};\n\nvar stringToPath = function stringToPath(input) {\n  var result = [];\n  input.replace(/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, function (match, mathNumber, mathQuote, originalString) {\n    result.push(mathQuote ? originalString.replace(/\\\\(\\\\)?/g, '$1') : mathNumber || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  return Object.entries(data).reduce(function (previous, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    if (!isKey(key)) {\n      set(previous, key, value);\n      return previous;\n    }\n\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value));\n  }, {});\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar unique = function unique(value) {\n  return value.filter(Boolean);\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = unique(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = function focusOnErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.ref.checked ? {\n      isValid: true,\n      value: option.ref.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref4) {\n    var selected = _ref4.selected;\n    return selected;\n  }).map(function (_ref5) {\n    var value = _ref5.value;\n    return value;\n  });\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"\".concat(SELECT, \"-multiple\");\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.ref.checked;\n      }).map(function (_ref6) {\n        var value = _ref6.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === '' ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fieldsRef, name, unmountFieldsStateRef) {\n  var field = fieldsRef.current[name];\n\n  if (field) {\n    var value = field.ref.value,\n        ref = field.ref;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nfunction baseGet(object, updatePath) {\n  var path = updatePath.slice(0, -1);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isSameRef = function isSameRef(fieldValue, ref) {\n  return fieldValue && fieldValue.ref === ref;\n};\n\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, unmountFieldsStateRef, shouldUnregister, forceDelete) {\n  var ref = field.ref,\n      _field$ref = field.ref,\n      name = _field$ref.name,\n      type = _field$ref.type,\n      mutationWatcher = field.mutationWatcher;\n  var fieldRef = fieldsRef.current[name];\n\n  if (!shouldUnregister) {\n    var value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    var options = fieldRef.options;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach(function (option, index) {\n        var ref = option.ref,\n            mutationWatcher = option.mutationWatcher;\n\n        if (ref && isDetached(ref) && isSameRef(option, ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, \"[\".concat(index, \"]\"));\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fieldsRef, unmountFieldsStateRef, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : isArray(search) && search.find(function (data) {\n      return name.startsWith(data);\n    }))) {\n      output[name] = getFieldValue(fieldsRef, name);\n    }\n  };\n\n  for (var name in fieldsRef.current) {\n    _loop(name);\n  }\n\n  return Object.assign(Object.assign({}, transformToNestObject((unmountFieldsStateRef || {}).current || {})), transformToNestObject(output));\n};\n\nvar isSameError = function isSameError(error, _ref7) {\n  var type = _ref7.type,\n      _ref7$types = _ref7.types,\n      types = _ref7$types === void 0 ? {} : _ref7$types,\n      message = _ref7.message;\n  return isObject(error) && error.type === type && error.message === message && Object.keys(error.types || {}).length === Object.keys(types).length && Object.entries(error.types || {}).every(function (_ref8) {\n    var _ref9 = _slicedToArray(_ref8, 2),\n        key = _ref9[0],\n        value = _ref9[1];\n\n    return types[key] === value;\n  });\n};\n\nfunction shouldRenderBasedOnError(_ref10) {\n  var errors = _ref10.errors,\n      name = _ref10.name,\n      error = _ref10.error,\n      validFields = _ref10.validFields,\n      fieldsWithValidation = _ref10.fieldsWithValidation;\n  var isFieldValid = isEmptyObject(error);\n  var isFormValid = isEmptyObject(errors);\n  var currentFieldError = get(error, name);\n  var existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar isValueMessage = function isValueMessage(value) {\n  return isObject(value) && !isRegex(value);\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || isObject(value) && isValidElement(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (validateAllFieldCriteria) {\n    var error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n    });\n  }\n\n  return {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref11, unmountFieldsStateRef) {\n    var ref, _ref11$ref, type, value, options, required, maxLength, minLength, min, max, pattern, validate, fields, name, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref13, requiredValue, requiredMessage, exceedMax, exceedMin, _getValueAndMessage, maxValue, maxMessage, _getValueAndMessage2, minValue, minMessage, valueNumber, valueDate, _getValueAndMessage3, maxLengthValue, maxLengthMessage, _getValueAndMessage4, minLengthValue, minLengthMessage, inputLength, _exceedMax, _exceedMin, _getValueAndMessage5, patternValue, patternMessage, fieldValue, validateRef, result, validateError, validationResult, _i, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref11.ref, _ref11$ref = _ref11.ref, type = _ref11$ref.type, value = _ref11$ref.value, options = _ref11.options, required = _ref11.required, maxLength = _ref11.maxLength, minLength = _ref11.minLength, min = _ref11.min, max = _ref11.max, pattern = _ref11.pattern, validate = _ref11.validate;\n            fields = fieldsRef.current;\n            name = ref.name;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = value === '';\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 16;\n              break;\n            }\n\n            _ref13 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), requiredValue = _ref13.value, requiredMessage = _ref13.message;\n\n            if (!requiredValue) {\n              _context.next = 16;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: requiredMessage,\n              ref: isRadioOrCheckbox ? (fields[name].options || [])[0].ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 16:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context.next = 24;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(max), maxValue = _getValueAndMessage.value, maxMessage = _getValueAndMessage.message;\n            _getValueAndMessage2 = getValueAndMessage(min), minValue = _getValueAndMessage2.value, minMessage = _getValueAndMessage2.message;\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxValue)) {\n                exceedMax = valueNumber > maxValue;\n              }\n\n              if (!isNullOrUndefined(minValue)) {\n                exceedMin = valueNumber < minValue;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxValue)) {\n                exceedMax = valueDate > new Date(maxValue);\n              }\n\n              if (isString(minValue)) {\n                exceedMin = valueDate < new Date(minValue);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 24;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 24;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 24:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 34;\n              break;\n            }\n\n            _getValueAndMessage3 = getValueAndMessage(maxLength), maxLengthValue = _getValueAndMessage3.value, maxLengthMessage = _getValueAndMessage3.message;\n            _getValueAndMessage4 = getValueAndMessage(minLength), minLengthValue = _getValueAndMessage4.value, minLengthMessage = _getValueAndMessage4.message;\n            inputLength = value.toString().length;\n            _exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n            _exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 34;\n              break;\n            }\n\n            getMinMaxMessage(!!_exceedMax, maxLengthMessage, minLengthMessage);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 34;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 34:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 40;\n              break;\n            }\n\n            _getValueAndMessage5 = getValueAndMessage(pattern), patternValue = _getValueAndMessage5.value, patternMessage = _getValueAndMessage5.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 40;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: patternMessage,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 40;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 40:\n            if (!validate) {\n              _context.next = 73;\n              break;\n            }\n\n            fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 54;\n              break;\n            }\n\n            _context.next = 46;\n            return validate(fieldValue);\n\n          case 46:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 52;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 52;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 52:\n            _context.next = 73;\n            break;\n\n          case 54:\n            if (!isObject(validate)) {\n              _context.next = 73;\n              break;\n            }\n\n            validationResult = {};\n            _i = 0, _Object$entries = Object.entries(validate);\n\n          case 57:\n            if (!(_i < _Object$entries.length)) {\n              _context.next = 69;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 61;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 69);\n\n          case 61:\n            _context.next = 63;\n            return validateFunction(fieldValue);\n\n          case 63:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 66:\n            _i++;\n            _context.next = 57;\n            break;\n\n          case 69:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 73;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 73;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 73:\n            return _context.abrupt(\"return\", error);\n\n          case 74:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(value, key, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values).map(function (_ref14) {\n    var _ref15 = _slicedToArray(_ref14, 2),\n        key = _ref15[0],\n        value = _ref15[1];\n\n    return getInnerPath(value, key, isObject(values));\n  }).flat(Infinity);\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, inputValue, isSingleField) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = function skipValidation(_ref16) {\n  var isOnBlur = _ref16.isOnBlur,\n      isOnChange = _ref16.isOnChange,\n      isReValidateOnBlur = _ref16.isReValidateOnBlur,\n      isReValidateOnChange = _ref16.isReValidateOnChange,\n      isBlurEvent = _ref16.isBlurEvent,\n      isSubmitted = _ref16.isSubmitted;\n\n  if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf('['));\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (var i = 0; i < referenceArray.length; i++) {\n    var dataA = referenceArray[i];\n    var dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      return true;\n    }\n\n    for (var key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp(\"^\".concat(searchName, \"[\\\\d+]\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return isMatchFieldArrayName(name, current);\n  });\n};\n\nvar isSelectInput = function isSelectInput(element) {\n  return element.type === \"\".concat(SELECT, \"-one\");\n};\n\nfunction onDomRemove(element, onDetachCallback) {\n  var observer = new MutationObserver(function () {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar isWindowUndefined = typeof window === UNDEFINED;\nvar isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\nvar isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nfunction useForm() {\n  var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref17$mode = _ref17.mode,\n      mode = _ref17$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref17$mode,\n      _ref17$reValidateMode = _ref17.reValidateMode,\n      reValidateMode = _ref17$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref17$reValidateMode,\n      resolver = _ref17.resolver,\n      context = _ref17.context,\n      _ref17$defaultValues = _ref17.defaultValues,\n      defaultValues = _ref17$defaultValues === void 0 ? {} : _ref17$defaultValues,\n      _ref17$shouldFocusErr = _ref17.shouldFocusError,\n      shouldFocusError = _ref17$shouldFocusErr === void 0 ? true : _ref17$shouldFocusErr,\n      _ref17$shouldUnregist = _ref17.shouldUnregister,\n      shouldUnregister = _ref17$shouldUnregist === void 0 ? true : _ref17$shouldUnregist,\n      criteriaMode = _ref17.criteriaMode;\n\n  var fieldsRef = useRef({});\n  var errorsRef = useRef({});\n  var touchedFieldsRef = useRef({});\n  var fieldArrayDefaultValues = useRef({});\n  var dirtyFieldsRef = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var watchFieldsHookRef = useRef({});\n  var watchFieldsHookRenderRef = useRef({});\n  var fieldsWithValidationRef = useRef(new Set());\n  var validFieldsRef = useRef(new Set());\n  var isValidRef = useRef(true);\n  var defaultValuesRef = useRef(defaultValues);\n  var defaultValuesAtRenderRef = useRef({});\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var isSubmittedRef = useRef(false);\n  var isDirtyRef = useRef(false);\n  var submitCountRef = useRef(0);\n  var isSubmittingRef = useRef(false);\n  var handleChangeRef = useRef();\n  var unmountFieldsStateRef = useRef({});\n  var resetFieldArrayFunctionRef = useRef({});\n  var contextRef = useRef(context);\n  var resolverRef = useRef(resolver);\n  var fieldArrayNamesRef = useRef(new Set());\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      render = _useState2[1];\n\n  var _useRef = useRef(modeChecker(mode)),\n      _useRef$current = _useRef.current,\n      isOnBlur = _useRef$current.isOnBlur,\n      isOnSubmit = _useRef$current.isOnSubmit,\n      isOnChange = _useRef$current.isOnChange,\n      isOnAll = _useRef$current.isOnAll;\n\n  var isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  var readFormStateRef = useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n\n  var _useRef2 = useRef(modeChecker(reValidateMode)),\n      _useRef2$current = _useRef2.current,\n      isReValidateOnBlur = _useRef2$current.isOnBlur,\n      isReValidateOnChange = _useRef2$current.isOnChange;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  var reRender = useCallback(function () {\n    return !isUnMount.current && render({});\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var shouldReRender = shouldRender || shouldRenderBasedOnError({\n      errors: errorsRef.current,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    var previousError = get(errorsRef.current, name);\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || previousError;\n      }\n\n      errorsRef.current = unset(errorsRef.current, name);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !previousError || !isSameError(previousError, error[name]);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n      reRender();\n      return true;\n    }\n  }, []);\n  var setFieldValue = useCallback(function (_ref18, rawValue) {\n    var ref = _ref18.ref,\n        options = _ref18.options;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(function (_ref19) {\n        var radioRef = _ref19.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref) && !isString(value)) {\n      ref.files = value;\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref20) {\n        var checkboxRef = _ref20.ref;\n        return checkboxRef.checked = value.includes(checkboxRef.value);\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, []);\n  var setDirty = useCallback(function (name) {\n    var _readFormStateRef$cur = readFormStateRef.current,\n        isDirty = _readFormStateRef$cur.isDirty,\n        dirtyFields = _readFormStateRef$cur.dirtyFields;\n\n    if (!fieldsRef.current[name] || !isDirty && !dirtyFields) {\n      return false;\n    }\n\n    var isFieldDirty = defaultValuesAtRenderRef.current[name] !== getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n    var isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    var previousIsDirty = isDirtyRef.current;\n\n    if (isFieldDirty) {\n      set(dirtyFieldsRef.current, name, true);\n    } else {\n      unset(dirtyFieldsRef.current, name);\n    }\n\n    isDirtyRef.current = isFieldArray && getIsFieldsDifferent(get(getValues(), getFieldArrayParentName(name)), get(defaultValuesRef.current, getFieldArrayParentName(name))) || !isEmptyObject(dirtyFieldsRef.current);\n    return isDirty && previousIsDirty !== isDirtyRef.current || dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name);\n  }, []);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var _error;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!fieldsRef.current[name]) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 3;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], unmountFieldsStateRef);\n\n            case 3:\n              _error = _context2.sent;\n              shouldRenderBaseOnError(name, _error, skipReRender ? null : false);\n              return _context2.abrupt(\"return\", isEmptyObject(_error));\n\n            case 6:\n              return _context2.abrupt(\"return\", false);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref21.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = useCallback( /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n      var _yield$resolverRef$cu, errors, previousFormIsValid, isInputsValid, _error2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 2:\n              _yield$resolverRef$cu = _context3.sent;\n              errors = _yield$resolverRef$cu.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n\n              if (!isArray(payload)) {\n                _context3.next = 12;\n                break;\n              }\n\n              isInputsValid = payload.map(function (name) {\n                var error = get(errors, name);\n\n                if (error) {\n                  set(errorsRef.current, name, error);\n                } else {\n                  unset(errorsRef.current, name);\n                }\n\n                return !error;\n              }).every(Boolean);\n              reRender();\n              return _context3.abrupt(\"return\", isInputsValid);\n\n            case 12:\n              _error2 = get(errors, payload);\n              shouldRenderBaseOnError(payload, _error2 ? _defineProperty({}, payload, _error2) : {}, previousFormIsValid !== isValidRef.current);\n              return _context3.abrupt(\"return\", !_error2);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x7) {\n      return _ref22.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var trigger = useCallback( /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = name || Object.keys(fieldsRef.current);\n\n              if (!resolverRef.current) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", executeSchemaOrResolverValidation(fields));\n\n            case 3:\n              if (!isArray(fields)) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 6;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, true);\n\n                        case 2:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x9) {\n                  return _ref25.apply(this, arguments);\n                };\n              }()));\n\n            case 6:\n              result = _context5.sent;\n              reRender();\n              return _context5.abrupt(\"return\", result.every(Boolean));\n\n            case 9:\n              _context5.next = 11;\n              return executeValidation(fields);\n\n            case 11:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x8) {\n      return _ref24.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation]);\n  var setInternalValues = useCallback(function (name, value, _ref26) {\n    var shouldDirty = _ref26.shouldDirty,\n        shouldValidate = _ref26.shouldValidate;\n    getPath(name, value).forEach(function (fieldName) {\n      var field = fieldsRef.current[fieldName];\n\n      if (field) {\n        setFieldValue(field, get(_defineProperty({}, name, value), fieldName));\n\n        if (shouldDirty) {\n          setDirty(fieldName);\n        }\n\n        if (shouldValidate) {\n          trigger(fieldName);\n        }\n      }\n    });\n  }, [trigger, setFieldValue, setDirty]);\n  var setInternalValue = useCallback(function (name, value, config) {\n    if (fieldsRef.current[name]) {\n      setFieldValue(fieldsRef.current[name], value);\n      return config.shouldDirty && setDirty(name);\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value, config);\n    }\n\n    if (!shouldUnregister) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n\n    return true;\n  }, [setDirty, setFieldValue, setInternalValues]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  var renderWatchedInputs = function renderWatchedInputs(name) {\n    var found = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (var key in watchFieldsHookRef.current) {\n        if (name === '' || watchFieldsHookRef.current[key].has(name) || watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) || !watchFieldsHookRef.current[key].size) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(name, value) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var shouldRender = setInternalValue(name, value, config) || isFieldWatched(name);\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref27) {\n      var type, target, name, field, error, isBlurEvent, shouldSkipValidation, shouldRender, _yield$resolver, errors, previousFormIsValid;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref27.type, target = _ref27.target;\n              name = target.name;\n              field = fieldsRef.current[name];\n\n              if (!field) {\n                _context6.next = 27;\n                break;\n              }\n\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = !isOnAll && skipValidation({\n                isOnChange: isOnChange,\n                isOnBlur: isOnBlur,\n                isBlurEvent: isBlurEvent,\n                isReValidateOnChange: isReValidateOnChange,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isSubmitted: isSubmittedRef.current\n              });\n              shouldRender = setDirty(name) || isFieldWatched(name);\n\n              if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n                set(touchedFieldsRef.current, name, true);\n                shouldRender = true;\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 11;\n                break;\n              }\n\n              renderWatchedInputs(name);\n              return _context6.abrupt(\"return\", shouldRender && reRender());\n\n            case 11:\n              if (!resolver) {\n                _context6.next = 22;\n                break;\n              }\n\n              _context6.next = 14;\n              return resolver(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 14:\n              _yield$resolver = _context6.sent;\n              errors = _yield$resolver.errors;\n              previousFormIsValid = isValidRef.current;\n              isValidRef.current = isEmptyObject(errors);\n              error = get(errors, name) ? _defineProperty({}, name, get(errors, name)) : {};\n\n              if (previousFormIsValid !== isValidRef.current) {\n                shouldRender = true;\n              }\n\n              _context6.next = 25;\n              break;\n\n            case 22:\n              _context6.next = 24;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, field, unmountFieldsStateRef);\n\n            case 24:\n              error = _context6.sent;\n\n            case 25:\n              renderWatchedInputs(name);\n\n              if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n                reRender();\n              }\n\n            case 27:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x10) {\n      return _ref28.apply(this, arguments);\n    };\n  }();\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, getFieldValue(fieldsRef, name, unmountFieldsStateRef)));\n      }, {});\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  var validateResolver = useCallback(function () {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    resolverRef.current(Object.assign(Object.assign(Object.assign({}, defaultValuesRef.current), getValues()), values), contextRef.current, isValidateAllFieldCriteria).then(function (_ref30) {\n      var errors = _ref30.errors;\n      var previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, [isValidateAllFieldCriteria]);\n  var removeFieldEventListener = useCallback(function (field, forceDelete) {\n    return findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, unmountFieldsStateRef, shouldUnregister, forceDelete);\n  }, [shouldUnregister]);\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (field && (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) || forceDelete)) {\n      removeFieldEventListener(field, forceDelete);\n\n      if (shouldUnregister) {\n        [errorsRef, touchedFieldsRef, dirtyFieldsRef, defaultValuesAtRenderRef].forEach(function (data) {\n          return unset(data.current, field.ref.name);\n        });\n        [fieldsWithValidationRef, validFieldsRef].forEach(function (data) {\n          return data.current.delete(field.ref.name);\n        });\n\n        if (readFormStateRef.current.isValid || readFormStateRef.current.touched || readFormStateRef.current.isDirty) {\n          isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n          reRender();\n\n          if (resolverRef.current) {\n            validateResolver();\n          }\n        }\n      }\n    }\n  }, [validateResolver, removeFieldEventListener]);\n\n  function clearErrors(name) {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach(function (inputName) {\n        return unset(errorsRef.current, inputName);\n      });\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name, error) {\n    isValidRef.current = false;\n    set(errorsRef.current, name, Object.assign(Object.assign({}, error), {\n      ref: (fieldsRef.current[name] || {}).ref\n    }));\n    reRender();\n  }\n\n  var watchInternal = useCallback(function (fieldNames, defaultValue, watchId) {\n    var watchFields = watchId ? watchFieldsHookRef.current[watchId] : watchFieldsRef.current;\n    var combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef, unmountFieldsStateRef, fieldNames);\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(defaultValue) ? get(combinedDefaultValues, fieldNames) : defaultValue, true);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    if (isUndefined(watchId)) {\n      isWatchAllRef.current = true;\n    }\n\n    return transformToNestObject(!isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues);\n  }, []);\n\n  function watch(fieldNames, defaultValue) {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(name) {\n    (isArray(name) ? name : [name]).forEach(function (fieldName) {\n      return removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    });\n  }\n\n  function registerFieldRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (process.env.NODE_ENV !== 'production' && !ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldRefAndValidationOptions = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var field = fields[name];\n    var isEmptyDefaultValue = true;\n    var isFieldArray;\n    var defaultValue;\n\n    if (field && (isRadioOrCheckbox ? isArray(field.options) && unique(field.options).find(function (option) {\n      return value === option.ref.value && option.ref === ref;\n    }) : ref === field.ref)) {\n      fields[name] = Object.assign(Object.assign({}, field), validateOptions);\n      return;\n    }\n\n    if (type) {\n      var mutationWatcher = onDomRemove(ref, function () {\n        return removeFieldEventListenerAndRef(field);\n      });\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(unique(field && field.options || [])), [{\n          ref: ref,\n          mutationWatcher: mutationWatcher\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldRefAndValidationOptions), {\n        mutationWatcher: mutationWatcher\n      });\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n    var isEmptyUnmountFields = isUndefined(get(unmountFieldsStateRef.current, name));\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(isEmptyUnmountFields ? defaultValuesRef.current : unmountFieldsStateRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, isValidateAllFieldCriteria, field, unmountFieldsStateRef).then(function (error) {\n          var previousFormIsValid = isValidRef.current;\n          isEmptyObject(error) ? validFieldsRef.current.add(name) : isValidRef.current = false;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      var fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue ? isObject(fieldValue) ? Object.assign({}, fieldValue) : fieldValue : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\n    }\n  }\n\n  function register(refOrValidationOptions, rules) {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({\n          name: refOrValidationOptions\n        }, rules);\n      } else if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return function (ref) {\n          return ref && registerFieldRef(ref, refOrValidationOptions);\n        };\n      }\n    }\n  }\n\n  var handleSubmit = useCallback(function (callback) {\n    return /*#__PURE__*/function () {\n      var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n        var fieldErrors, fieldValues, _yield$resolverRef$cu2, errors, values, _i2, _Object$values, field, _name, fieldError;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (e && e.preventDefault) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fieldValues = getValues();\n\n                if (readFormStateRef.current.isSubmitting) {\n                  isSubmittingRef.current = true;\n                  reRender();\n                }\n\n                _context7.prev = 4;\n\n                if (!resolverRef.current) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                _context7.next = 8;\n                return resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\n\n              case 8:\n                _yield$resolverRef$cu2 = _context7.sent;\n                errors = _yield$resolverRef$cu2.errors;\n                values = _yield$resolverRef$cu2.values;\n                errorsRef.current = errors;\n                fieldErrors = errors;\n                fieldValues = values;\n                _context7.next = 28;\n                break;\n\n              case 16:\n                _i2 = 0, _Object$values = Object.values(fieldsRef.current);\n\n              case 17:\n                if (!(_i2 < _Object$values.length)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                field = _Object$values[_i2];\n\n                if (!field) {\n                  _context7.next = 25;\n                  break;\n                }\n\n                _name = field.ref.name;\n                _context7.next = 23;\n                return validateField(fieldsRef, isValidateAllFieldCriteria, field, unmountFieldsStateRef);\n\n              case 23:\n                fieldError = _context7.sent;\n\n                if (fieldError[_name]) {\n                  set(fieldErrors, _name, fieldError[_name]);\n                  validFieldsRef.current.delete(_name);\n                } else if (fieldsWithValidationRef.current.has(_name)) {\n                  unset(errorsRef.current, _name);\n                  validFieldsRef.current.add(_name);\n                }\n\n              case 25:\n                _i2++;\n                _context7.next = 17;\n                break;\n\n              case 28:\n                if (!(isEmptyObject(fieldErrors) && Object.keys(errorsRef.current).every(function (name) {\n                  return Object.keys(fieldsRef.current).includes(name);\n                }))) {\n                  _context7.next = 35;\n                  break;\n                }\n\n                errorsRef.current = {};\n                reRender();\n                _context7.next = 33;\n                return callback(fieldValues, e);\n\n              case 33:\n                _context7.next = 37;\n                break;\n\n              case 35:\n                errorsRef.current = Object.assign(Object.assign({}, errorsRef.current), fieldErrors);\n\n                if (shouldFocusError) {\n                  focusOnErrorField(fieldsRef.current, fieldErrors);\n                }\n\n              case 37:\n                _context7.prev = 37;\n                isSubmittedRef.current = true;\n                isSubmittingRef.current = false;\n                submitCountRef.current = submitCountRef.current + 1;\n                reRender();\n                return _context7.finish(37);\n\n              case 43:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[4,, 37, 43]]);\n      }));\n\n      return function (_x11) {\n        return _ref31.apply(this, arguments);\n      };\n    }();\n  }, [shouldFocusError, isValidateAllFieldCriteria]);\n\n  var resetRefs = function resetRefs(_ref32) {\n    var errors = _ref32.errors,\n        isDirty = _ref32.isDirty,\n        isSubmitted = _ref32.isSubmitted,\n        touched = _ref32.touched,\n        isValid = _ref32.isValid,\n        submitCount = _ref32.submitCount,\n        dirtyFields = _ref32.dirtyFields;\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i3 = 0, _Object$values2 = Object.values(fieldsRef.current); _i3 < _Object$values2.length; _i3++) {\n        var field = _Object$values2[_i3];\n\n        if (field) {\n          var _ref33 = field.ref,\n              options = field.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref33) && isArray(options) ? options[0].ref : _ref33;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  useEffect(function () {\n    isUnMount.current = false;\n    return function () {\n      isUnMount.current = true;\n      fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  var formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  var commonProps = {\n    trigger: trigger,\n    setValue: useCallback(setValue, [reRender, setInternalValue, trigger]),\n    getValues: useCallback(getValues, []),\n    register: useCallback(register, [defaultValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState\n  };\n  var control = Object.assign(Object.assign(Object.assign({\n    removeFieldEventListener: removeFieldEventListener,\n    renderWatchedInputs: renderWatchedInputs,\n    watchInternal: watchInternal,\n    reRender: reRender\n  }, resolver ? {\n    validateSchemaIsValid: validateResolver\n  } : {}), {\n    mode: {\n      isOnBlur: isOnBlur,\n      isOnSubmit: isOnSubmit,\n      isOnChange: isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnChange: isReValidateOnChange\n    },\n    errorsRef: errorsRef,\n    touchedFieldsRef: touchedFieldsRef,\n    fieldsRef: fieldsRef,\n    isWatchAllRef: isWatchAllRef,\n    watchFieldsRef: watchFieldsRef,\n    resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n    watchFieldsHookRef: watchFieldsHookRef,\n    watchFieldsHookRenderRef: watchFieldsHookRenderRef,\n    fieldArrayDefaultValues: fieldArrayDefaultValues,\n    validFieldsRef: validFieldsRef,\n    dirtyFieldsRef: dirtyFieldsRef,\n    fieldsWithValidationRef: fieldsWithValidationRef,\n    fieldArrayNamesRef: fieldArrayNamesRef,\n    isDirtyRef: isDirtyRef,\n    isSubmittedRef: isSubmittedRef,\n    readFormStateRef: readFormStateRef,\n    defaultValuesRef: defaultValuesRef,\n    unmountFieldsStateRef: unmountFieldsStateRef\n  }), commonProps);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    handleSubmit: handleSubmit,\n    reset: useCallback(reset, []),\n    clearErrors: useCallback(clearErrors, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormContext = createContext(null);\nFormContext.displayName = 'RHFContext';\n\nvar useFormContext = function useFormContext() {\n  return useContext(FormContext);\n};\n\nvar FormProvider = function FormProvider(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return createElement(FormContext.Provider, {\n    value: Object.assign({}, props)\n  }, children);\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar removeAt = function removeAt(data, index) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(data.slice(index + 1)));\n};\n\nfunction removeAtIndexes(data, index) {\n  var k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(isArray(value) ? value : [value || undefined]), _toConsumableArray(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(isArray(value) ? value : [value || undefined]), _toConsumableArray(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return isArray(value) ? Array(value.length).fill(undefined) : undefined;\n};\n\nfunction mapValueToBoolean(value) {\n  if (isObject(value)) {\n    var object = {};\n\n    for (var key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nvar filterBooleanArray = function filterBooleanArray(value) {\n  return isArray(value) ? value.map(mapValueToBoolean).flat() : mapValueToBoolean(value);\n};\n\nvar appendId = function appendId(value, keyName) {\n  return Object.assign(_defineProperty({}, keyName, generateId()), isObject(value) ? value : {\n    value: value\n  });\n};\n\nvar mapIds = function mapIds(data, keyName) {\n  return (isArray(data) ? data : []).map(function (value) {\n    return appendId(value, keyName);\n  });\n};\n\nvar useFieldArray = function useFieldArray(_ref34) {\n  var control = _ref34.control,\n      name = _ref34.name,\n      _ref34$keyName = _ref34.keyName,\n      keyName = _ref34$keyName === void 0 ? 'id' : _ref34$keyName;\n  var methods = useFormContext();\n  var focusIndexRef = useRef(-1);\n\n  var _ref35 = control || methods.control,\n      isWatchAllRef = _ref35.isWatchAllRef,\n      resetFieldArrayFunctionRef = _ref35.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref35.fieldArrayNamesRef,\n      reRender = _ref35.reRender,\n      fieldsRef = _ref35.fieldsRef,\n      defaultValuesRef = _ref35.defaultValuesRef,\n      removeFieldEventListener = _ref35.removeFieldEventListener,\n      errorsRef = _ref35.errorsRef,\n      dirtyFieldsRef = _ref35.dirtyFieldsRef,\n      isDirtyRef = _ref35.isDirtyRef,\n      touchedFieldsRef = _ref35.touchedFieldsRef,\n      readFormStateRef = _ref35.readFormStateRef,\n      watchFieldsRef = _ref35.watchFieldsRef,\n      validFieldsRef = _ref35.validFieldsRef,\n      fieldsWithValidationRef = _ref35.fieldsWithValidationRef,\n      fieldArrayDefaultValues = _ref35.fieldArrayDefaultValues,\n      validateSchemaIsValid = _ref35.validateSchemaIsValid,\n      renderWatchedInputs = _ref35.renderWatchedInputs,\n      getValues = _ref35.getValues;\n\n  var shouldRender;\n\n  var getDefaultValues = function getDefaultValues() {\n    return _toConsumableArray(get(fieldArrayDefaultValues.current[getFieldArrayParentName(name)] ? fieldArrayDefaultValues.current : defaultValuesRef.current, name, []));\n  };\n\n  var memoizedDefaultValues = useRef(getDefaultValues());\n\n  var _useState3 = useState(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setField = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDeleted = _useState6[0],\n      setIsDeleted = _useState6[1];\n\n  var allFields = useRef(fields);\n  var isNameKey = isKey(name);\n\n  var getCurrentFieldsValues = function getCurrentFieldsValues() {\n    return watchFieldsRef.current.has(name) ? get(getValues(), name).map(function (item, index) {\n      return Object.assign(Object.assign({}, allFields.current[index]), item);\n    }) : allFields.current;\n  };\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  var appendValueWithKey = function appendValueWithKey(values) {\n    return values.map(function (value) {\n      return appendId(value, keyName);\n    });\n  };\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid(_defineProperty({}, name, fieldsValues));\n    }\n  };\n\n  var shouldRenderFieldArray = function shouldRenderFieldArray(shouldRender) {\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  var resetFields = function resetFields(flagOrFields) {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) || getIsFieldsDifferent(flagOrFields, get(defaultValuesRef.current, name, []));\n    }\n\n    for (var key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  var append = function append(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    shouldRender = false;\n    setFieldAndValidState([].concat(_toConsumableArray(allFields.current), _toConsumableArray(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])));\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [].concat(_toConsumableArray(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))), _toConsumableArray(filterBooleanArray(value)));\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n    setFieldAndValidState(prepend(getCurrentFieldsValues(), isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prepend(get(errorsRef.current, name), emptyArray);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prepend(touchedFieldsRef.current[name], emptyArray);\n      shouldRender = true;\n    }\n\n    if ((readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) && dirtyFieldsRef.current[name]) {\n      dirtyFieldsRef.current[name] = prepend(dirtyFieldsRef.current[name], filterBooleanArray(value));\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  var remove = function remove(index) {\n    shouldRender = false;\n    setFieldAndValidState(removeArrayAt(getCurrentFieldsValues(), index));\n    resetFields(removeArrayAt(get(getValues(), name), index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(errorsRef.current, name, removeArrayAt(get(errorsRef.current, name), index));\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if ((readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) && dirtyFieldsRef.current[name]) {\n      dirtyFieldsRef.current[name] = removeArrayAt(dirtyFieldsRef.current[name], index);\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      var fieldIndex = -1;\n      var isFound = false;\n      var isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        var isLast = fieldIndex === fields.length - 1;\n        var isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (var key in fields[fieldIndex]) {\n          var currentFieldName = \"\".concat(name, \"[\").concat(fieldIndex, \"].\").concat(key);\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            var previousFieldName = \"\".concat(name, \"[\").concat(fieldIndex - 1, \"].\").concat(key);\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    var shouldFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    shouldRender = false;\n    var emptyArray = fillEmptyArray(value);\n    setFieldAndValidState(insert(getCurrentFieldsValues(), index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n    resetFields(insert(get(getValues(), name), index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insert(get(errorsRef.current, name), index, emptyArray);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insert(touchedFieldsRef.current[name], index, emptyArray);\n      shouldRender = true;\n    }\n\n    if ((readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) && dirtyFieldsRef.current[name]) {\n      dirtyFieldsRef.current[name] = insert(dirtyFieldsRef.current[name], index, filterBooleanArray(value));\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  var swap = function swap(indexA, indexB) {\n    shouldRender = false;\n    var fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState(_toConsumableArray(fieldValues));\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if ((readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) && dirtyFieldsRef.current[name]) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  var move = function move(from, to) {\n    shouldRender = false;\n    var fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState(_toConsumableArray(fieldValues));\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if ((readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) && dirtyFieldsRef.current[name]) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  var reset = function reset() {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect(function () {\n    if (isNameKey && isDeleted && fieldArrayDefaultValues.current[name] && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      var _iterator = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var watchField = _step.value;\n\n          if (watchField.startsWith(name)) {\n            reRender();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (var key in fieldsRef.current) {\n        var field = fieldsRef.current[key];\n\n        if (key.startsWith(\"\".concat(name, \"[\").concat(focusIndexRef.current, \"]\")) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey, reRender, fieldsRef, watchFieldsRef, isWatchAllRef]);\n  useEffect(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name]),\n    remove: useCallback(remove, [fields, name]),\n    insert: useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nfunction useWatch(_ref36) {\n  var control = _ref36.control,\n      name = _ref36.name,\n      defaultValue = _ref36.defaultValue;\n  var methods = useFormContext();\n\n  var _ref37 = control || methods.control,\n      watchFieldsHookRef = _ref37.watchFieldsHookRef,\n      watchFieldsHookRenderRef = _ref37.watchFieldsHookRenderRef,\n      watchInternal = _ref37.watchInternal,\n      defaultValuesRef = _ref37.defaultValuesRef;\n\n  var _useState7 = useState(isUndefined(defaultValue) ? isString(name) ? get(defaultValuesRef.current, name) : isArray(name) ? name.reduce(function (previous, inputName) {\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, inputName, get(defaultValuesRef.current, inputName)));\n  }, {}) : defaultValuesRef.current : defaultValue),\n      _useState8 = _slicedToArray(_useState7, 2),\n      value = _useState8[0],\n      setValue = _useState8[1];\n\n  var idRef = useRef();\n  var defaultValueRef = useRef(defaultValue);\n  var nameRef = useRef(name);\n  var updateWatchValue = useCallback(function () {\n    return setValue(watchInternal(nameRef.current, defaultValueRef.current, idRef.current));\n  }, [setValue, watchInternal, defaultValueRef, nameRef, idRef]);\n  useEffect(function () {\n    var id = idRef.current = generateId();\n    var watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    var watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n    return function () {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [nameRef, updateWatchValue, watchFieldsHookRenderRef, watchFieldsHookRef, watchInternal, defaultValueRef]);\n  return isUndefined(value) ? defaultValue : value;\n}\n\nvar getInputValue = function getInputValue(event) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nvar Controller = function Controller(_a) {\n  var name = _a.name,\n      rules = _a.rules,\n      as = _a.as,\n      render = _a.render,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      onFocus = _a.onFocus,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  var methods = useFormContext();\n\n  var _ref38 = control || methods.control,\n      defaultValuesRef = _ref38.defaultValuesRef,\n      setValue = _ref38.setValue,\n      register = _ref38.register,\n      unregister = _ref38.unregister,\n      trigger = _ref38.trigger,\n      _ref38$mode = _ref38.mode,\n      isOnChange = _ref38$mode.isOnChange,\n      isOnBlur = _ref38$mode.isOnBlur,\n      _ref38$reValidateMode = _ref38.reValidateMode,\n      isReValidateOnBlur = _ref38$reValidateMode.isReValidateOnBlur,\n      isReValidateOnChange = _ref38$reValidateMode.isReValidateOnChange,\n      isSubmittedRef = _ref38.isSubmittedRef,\n      touchedFieldsRef = _ref38.touchedFieldsRef,\n      readFormStateRef = _ref38.readFormStateRef,\n      reRender = _ref38.reRender,\n      fieldsRef = _ref38.fieldsRef,\n      fieldArrayNamesRef = _ref38.fieldArrayNamesRef,\n      unmountFieldsStateRef = _ref38.unmountFieldsStateRef,\n      formState = _ref38.formState;\n\n  var isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n  var getInitialValue = function getInitialValue() {\n    return !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray ? unmountFieldsStateRef.current[name] : isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue;\n  };\n\n  var _useState9 = useState(getInitialValue()),\n      _useState10 = _slicedToArray(_useState9, 2),\n      value = _useState10[0],\n      setInputStateValue = _useState10[1];\n\n  var valueRef = useRef(value);\n  var onFocusRef = useRef(onFocus);\n  var isSubmitted = isSubmittedRef.current;\n\n  var shouldValidate = function shouldValidate() {\n    return !skipValidation({\n      isOnBlur: isOnBlur,\n      isOnChange: isOnChange,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnChange: isReValidateOnChange,\n      isSubmitted: isSubmitted\n    });\n  };\n\n  var commonTask = function commonTask(_ref39) {\n    var _ref40 = _slicedToArray(_ref39, 1),\n        event = _ref40[0];\n\n    var data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  var registerField = useCallback(function () {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = Object.assign({\n        ref: fieldsRef.current[name].ref\n      }, rules);\n    } else {\n      register(Object.defineProperty({\n        name: name,\n        focus: onFocusRef.current\n      }, VALUE, {\n        set: function set(data) {\n          setInputStateValue(data);\n          valueRef.current = data;\n        },\n        get: function get() {\n          return valueRef.current;\n        }\n      }), rules);\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n  useEffect(function () {\n    return function () {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    };\n  }, [unregister, name, fieldArrayNamesRef]);\n  useEffect(function () {\n    registerField();\n  }, [registerField]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!fieldsRef.current[name]) {\n      registerField();\n\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  var onBlur = function onBlur() {\n    if (readFormStateRef.current.touched && !get(touchedFieldsRef.current, name)) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || formState.isSubmitted && isReValidateOnBlur) {\n      trigger(name);\n    }\n  };\n\n  var onChange = function onChange() {\n    for (var _len = arguments.length, event = new Array(_len), _key = 0; _key < _len; _key++) {\n      event[_key] = arguments[_key];\n    }\n\n    return setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true\n    });\n  };\n\n  var props = Object.assign(Object.assign({}, rest), {\n    onChange: onChange,\n    onBlur: onBlur,\n    name: name,\n    value: value\n  });\n  return as ? isValidElement(as) ? cloneElement(as, props) : createElement(as, props) : render ? render({\n    onChange: onChange,\n    onBlur: onBlur,\n    value: value\n  }) : null;\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useFieldArray, useForm, useFormContext, useWatch };","map":{"version":3,"sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/logic/attachEventListeners.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/focusOnErrorField.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/isSameError.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isBoolean.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/getIsFieldsDifferent.ts","../src/logic/isNameInFieldArray.ts","../src/utils/isSelectInput.ts","../src/utils/onDomRemove.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/useWatch.ts","../src/logic/getInputValue.ts","../src/controller.tsx"],"names":["isCheckBox","getFieldsValue","React.useRef","React.useState","React.useCallback","React.useEffect","React.createContext","React.useContext","React.createElement","prepend","prependAt","insert","insertAt","React.isValidElement","React.cloneElement"],"mappings":"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","sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return {\n    ...transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    ...transformToNestObject(output),\n  };\n};\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n}: {\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isReValidateOnBlur: boolean;\n  isReValidateOnChange: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted: boolean;\n}) => {\n  if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const {\n    current: { isOnBlur, isOnSubmit, isOnChange, isOnAll },\n  } = React.useRef(modeChecker(mode));\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          setFieldValue(field, get({ [name]: value }, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isOnChange,\n              isOnBlur,\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolver) {\n            const { errors } = await resolver(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    (values = {}) => {\n      resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production' && !ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getValues();\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport isKey from './utils/isKey';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...get(\n      fieldArrayDefaultValues.current[getFieldArrayParentName(name)]\n        ? fieldArrayDefaultValues.current\n        : defaultValuesRef.current,\n      name,\n      [],\n    ),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setField] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const isNameKey = isKey(name);\n\n  const getCurrentFieldsValues = () =>\n    watchFieldsRef.current.has(name)\n      ? get(getValues(), name).map(\n          (item: Partial<TFieldArrayValues>, index: number) => ({\n            ...allFields.current[index],\n            ...item,\n          }),\n        )\n      : allFields.current;\n\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues,\n      });\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender: boolean) => {\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      shouldRender = true;\n    }\n\n    renderWatchedInputs(name);\n\n    shouldRender && !isWatchAllRef.current && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (readFormStateRef.current.isDirty) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        getIsFieldsDifferent(\n          flagOrFields,\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (readFormStateRef.current.dirtyFields) {\n      dirtyFieldsRef.current[name] = [\n        ...(dirtyFieldsRef.current[name] || fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ];\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = prependAt(\n        get(errorsRef.current, name),\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(\n        touchedFieldsRef.current[name],\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = prependAt(\n        dirtyFieldsRef.current[name],\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    setFieldAndValidState(removeArrayAt(getCurrentFieldsValues(), index));\n    resetFields(removeArrayAt(get(getValues(), name), index));\n    setIsDeleted(true);\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(\n        touchedFieldsRef.current[name],\n        index,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = removeArrayAt(\n        dirtyFieldsRef.current[name],\n        index,\n      );\n\n      if (!dirtyFieldsRef.current[name].length) {\n        delete dirtyFieldsRef.current[name];\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      insertAt(\n        getCurrentFieldsValues(),\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(get(getValues(), name), index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      errorsRef.current[name] = insertAt(\n        get(errorsRef.current, name),\n        index,\n        emptyArray,\n      );\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(\n        touchedFieldsRef.current[name],\n        index,\n        emptyArray,\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      dirtyFieldsRef.current[name] = insertAt(\n        dirtyFieldsRef.current[name],\n        index,\n        filterBooleanArray(value),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      swapArrayAt(dirtyFieldsRef.current[name], indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      dirtyFieldsRef.current[name]\n    ) {\n      moveArrayAt(dirtyFieldsRef.current[name], from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (\n      isNameKey &&\n      isDeleted &&\n      fieldArrayDefaultValues.current[name] &&\n      fields.length < fieldArrayDefaultValues.current[name].length\n    ) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    isDeleted,\n    isNameKey,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\n  control?: Control;\n}): UnpackNestedValue<LiteralToPrimitive<TWatchFieldValue>>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n  const nameRef = React.useRef(name);\n\n  const updateWatchValue = React.useCallback(\n    () =>\n      setValue(\n        watchInternal(nameRef.current, defaultValueRef.current, idRef.current),\n      ),\n    [setValue, watchInternal, defaultValueRef, nameRef, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(nameRef.current, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    nameRef,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode: { isOnChange, isOnBlur },\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n    formState,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n  const isSubmitted = isSubmittedRef.current;\n\n  const shouldValidate = () =>\n    !skipValidation({\n      isOnBlur,\n      isOnChange,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (isOnBlur || (formState.isSubmitted && isReValidateOnBlur)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n      })\n    : null;\n};\n\nexport { Controller };\n"]},"metadata":{},"sourceType":"module"}